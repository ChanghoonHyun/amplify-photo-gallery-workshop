<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Amplify Web App Workshop on Amplify / AppSync / React Workshop</title>
    <link>https://awskrug.github.io/amplify-photo-gallery-workshop/</link>
    <description>Recent content in Amplify Web App Workshop on Amplify / AppSync / React Workshop</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ko-kr</language>
    
	<atom:link href="https://awskrug.github.io/amplify-photo-gallery-workshop/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Create an AWS account</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/10_prerequisites/1_account.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/10_prerequisites/1_account.html</guid>
      <description>Your account must have the ability to create new IAM roles and scope other IAM permissions.
 If you already have an AWS account, and have IAM Administrator access, you can skip this page.
  If you don&amp;rsquo;t already have an AWS account with Administrator access: create one now
 Once you have an AWS account, ensure you are following the remaining workshop steps as an IAM user with administrator access to the AWS account: Create a new IAM user to use for the workshop</description>
    </item>
    
    <item>
      <title>Managing Albums</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/50_working_with_albums/5_managing_albums.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/50_working_with_albums/5_managing_albums.html</guid>
      <description>At this point, we have a web app that authenticates users and a secure GraphQL API endpoint that lets us create and read Album data. It&amp;rsquo;s time to connect the two together!
As we saw above, AWS Amplify is an open source JavaScript library that makes it very easy to integrate a number of cloud services into your web or React Native apps. We&amp;rsquo;ll start by using its Connect React component to take care of automatically querying our GraphQL API and providing data for our React components to use when rendering.</description>
    </item>
    
    <item>
      <title>Congratulations!</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/130_wrapping_up/10_what_we_built.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/130_wrapping_up/10_what_we_built.html</guid>
      <description>While no application is really ever done, we&amp;rsquo;ve certainly come a long way toward building a shareable photo albums web app!
Here&amp;rsquo;s a reminder of everything we accomplished. We:
 Started with a simple React web app
 Added user authentication with a complete sign up and sign in flow
 Created a GraphQL API to securely manage photo albums backed by DynamoDB tables
 Added the ability to create and view albums</description>
    </item>
    
    <item>
      <title>Create a Cloud9 Workspace</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/10_prerequisites/10_workspace.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/10_prerequisites/10_workspace.html</guid>
      <description>AWS Cloud9 is a cloud-based integrated development environment (IDE) that lets you write, run, and debug your code with just a browser. It includes a code editor, debugger, and terminal. Cloud9 comes prepackaged with essential tools for popular programming languages, including JavaScript, Python, PHP, and more, so you don&amp;rsquo;t need to install files or configure your development machine to start new projects.
The Cloud9 workspace should be built by an IAM user with Administrator privileges, not the root account user.</description>
    </item>
    
    <item>
      <title>Creating a Photo Processor Lambda function</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/70_generating_thumbnails/10_creating_a_photo_processor_lambda.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/70_generating_thumbnails/10_creating_a_photo_processor_lambda.html</guid>
      <description>Let&amp;rsquo;s make a photo processor lambda function so that we can resize our photos.
When following the instructions below, you must name your lambda function workshopphotoprocessor.   Later, we&amp;rsquo;ll edit some CloudFormation templates, and the function name workshopphotoprocessor is hard coded to make it easier for this workshop (less edits that you&amp;rsquo;ll have to do).
  From the photo-albums directory, run: amplify function add and respond to the prompts the same way as shown below.</description>
    </item>
    
    <item>
      <title>Integrating Amazon Rekognition</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/110_ai/10_rekognition.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/110_ai/10_rekognition.html</guid>
      <description>It would be great if we could find images without having to manually tag them with descriptions of their contents. Luckily, adding this feature is pretty easy thanks to Amazon Rekognition. We can use the DetectLabels API &amp;ndash; if we give it a photo, it will respond with a list of appropriate labels for the image. Perfect!
Amazon Rekognition&amp;rsquo;s DetectLabels Quick Summary  You pass the input image as base64-encoded image bytes or as a reference to an image in an Amazon S3 bucket.</description>
    </item>
    
    <item>
      <title>Making a Lightbox for Viewing Fullsize Photos</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/140_bonus/10_lightbox_photos.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/140_bonus/10_lightbox_photos.html</guid>
      <description>One thing we haven&amp;rsquo;t yet addressed in our app is adding the ability for users to click on a photo thumbnail to see a larger version of the photo. Since we already have the fullsize and the thumbnail data available to query from our API, all we need to do is update our front end application with a few more lines of code.
Updating the front end Replace photo-albums/src/App.js with the following updated version: // photo-albums/src/App.</description>
    </item>
    
    <item>
      <title>Setting Up AppSync</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/40_graphql/10_setting_up_appsync.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/40_graphql/10_setting_up_appsync.html</guid>
      <description>Now that we have authenticated users, let&amp;rsquo;s make an API for creating albums. These albums won&amp;rsquo;t have any photos in them just yet, just a name and an association with the username that created them, but it&amp;rsquo;s another clear step toward putting our app together.
To build our API we&amp;rsquo;ll use AWS AppSync, a managed GraphQL service for building data-driven apps. If you&amp;rsquo;re not yet familiar with the basics of GraphQL, you should take a few minutes and check out https://graphql.</description>
    </item>
    
    <item>
      <title>Setting Up the Back End</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/30_adding_auth/10_adding_auth_back.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/30_adding_auth/10_adding_auth_back.html</guid>
      <description>Now that we have a simple React app, let&amp;rsquo;s let users sign up and sign in to our app. They won&amp;rsquo;t be able to do anything yet, but it will be helpful to have this in place so that when we add in the ability to query our backend API, we&amp;rsquo;ll know which users are accessing our system.
The AWS Amplify CLI makes it easy for us to add cloud capabilities to our web and mobile apps, with SDKs available for React and React Native, iOS, and Android.</description>
    </item>
    
    <item>
      <title>What We&#39;ll Build</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/20_getting_started/10_what_we_will_build.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/20_getting_started/10_what_we_will_build.html</guid>
      <description>Our Goal In this workshop, we&amp;rsquo;ll build an app with quite a few features, including:
 Allowing user sign up and authentication, so we know who owns which photo albums
 Building an API server, so our front end has a way to load the appropriate albums and photos to show a given user
 Storing data about albums, photos, and permissions of who can view what, so that our API has a fast and reliable place to query and save data to</description>
    </item>
    
    <item>
      <title>Allowing Other Users To Collaborate In Albums</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/140_bonus/20_album_membership.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/140_bonus/20_album_membership.html</guid>
      <description>We can take advantage of the fact that multiple users can sign in to our app and add the ability for other people view and upload to our albums on a case-by-case basis.
The simplest way to do this is to have each album contain a set of usernames that are allowed to view and upload photos to it. Let&amp;rsquo;s see how we can make this work.
Updating the backend Amplify supports multiple authorization declarations on the @model types in our GraphQL Schema.</description>
    </item>
    
    <item>
      <title>Bootstrapping the App</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/20_getting_started/20_bootstrapping_the_app.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/20_getting_started/20_bootstrapping_the_app.html</guid>
      <description>Creating a React app We&amp;rsquo;ll get things started by building a new React web app using the create-react-app CLI tool.
This will give us a sample React app with a local auto-reloading web server and some helpful transpiling support for the browser like letting us use async/await keywords, arrow functions, and more.
 You can learn more about create-react-app at https://github.com/facebook/create-react-app.
 In the Cloud9 terminal, run npx create-react-app photo-albums, then navigate to the newly created directory cd photo-albums</description>
    </item>
    
    <item>
      <title>Cleaning Up</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/130_wrapping_up/20_cleanup.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/130_wrapping_up/20_cleanup.html</guid>
      <description>Deleting via Amplify Amplify can do a pretty good job of removing most of the cloud resources we&amp;rsquo;ve provisioned for this workshop (just by attempting to delete the CloudFormation nested stack it provisioned). However, it will refuse to delete a few items, which we&amp;rsquo;ll manually take care of as well.
 From the photo-albums directory, run: amplify delete and press Enter to confirm the deletion.
 Wait a few minutes while Amplify deletes most of our resources.</description>
    </item>
    
    <item>
      <title>Connecting the photos bucket to the processor function</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/70_generating_thumbnails/20_connecting_the_lambda_to_the_bucket.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/70_generating_thumbnails/20_connecting_the_lambda_to_the_bucket.html</guid>
      <description>Triggering the function when new photos are uploaded to the S3 bucket Now that we&amp;rsquo;ve created our Photo Processor function, we need to set up a trigger for it to run. Since we want to process every photo that gets uploaded to an album, we&amp;rsquo;ll make these changes by updating the configuration of the S3 userfiles bucket that Amplify created for us.
 Replace photo-albums/amplify/backend/storage/photoalbumsstorage/s3-cloudformation-template.json with the following: { &amp;#34;AWSTemplateFormatVersion&amp;#34;: &amp;#34;2010-09-09&amp;#34;, &amp;#34;Description&amp;#34;: &amp;#34;S3 resource stack creation using Amplify CLI&amp;#34;, &amp;#34;Parameters&amp;#34;: { &amp;#34;bucketName&amp;#34;: { &amp;#34;Type&amp;#34;: &amp;#34;String&amp;#34; }, &amp;#34;authPolicyName&amp;#34;: { &amp;#34;Type&amp;#34;: &amp;#34;String&amp;#34; }, &amp;#34;unauthPolicyName&amp;#34;: { &amp;#34;Type&amp;#34;: &amp;#34;String&amp;#34; }, &amp;#34;authRoleName&amp;#34;: { &amp;#34;Type&amp;#34;: &amp;#34;String&amp;#34; }, &amp;#34;unauthRoleName&amp;#34;: { &amp;#34;Type&amp;#34;: &amp;#34;String&amp;#34; }, &amp;#34;unauthPermissions&amp;#34;: { &amp;#34;Type&amp;#34;: &amp;#34;String&amp;#34; }, &amp;#34;authPermissions&amp;#34;: { &amp;#34;Type&amp;#34;: &amp;#34;String&amp;#34; }, &amp;#34;env&amp;#34;: { &amp;#34;Type&amp;#34;: &amp;#34;String&amp;#34; }  }, &amp;#34;Conditions&amp;#34;: { &amp;#34;ShouldNotCreateEnvResources&amp;#34;: { &amp;#34;Fn::Equals&amp;#34;: [ { &amp;#34;Ref&amp;#34;: &amp;#34;env&amp;#34; }, &amp;#34;NONE&amp;#34; ] }, &amp;#34;EnableUnauthReadWrite&amp;#34;: { &amp;#34;Fn::Equals&amp;#34;: [ { &amp;#34;Ref&amp;#34;: &amp;#34;unauthPermissions&amp;#34; }, &amp;#34;rw&amp;#34; ] }, &amp;#34;EnableUnauthRead&amp;#34;: { &amp;#34;Fn::Equals&amp;#34;: [ { &amp;#34;Ref&amp;#34;: &amp;#34;unauthPermissions&amp;#34; }, &amp;#34;r&amp;#34; ] }, &amp;#34;EnableUnauthWrite&amp;#34;: { &amp;#34;Fn::Equals&amp;#34;: [ { &amp;#34;Ref&amp;#34;: &amp;#34;unauthPermissions&amp;#34; }, &amp;#34;w&amp;#34; ] }, &amp;#34;EnableAuthReadWrite&amp;#34;: { &amp;#34;Fn::Equals&amp;#34;: [ { &amp;#34;Ref&amp;#34;: &amp;#34;authPermissions&amp;#34; }, &amp;#34;rw&amp;#34; ] }, &amp;#34;EnableAuthRead&amp;#34;: { &amp;#34;Fn::Equals&amp;#34;: [ { &amp;#34;Ref&amp;#34;: &amp;#34;authPermissions&amp;#34; }, &amp;#34;r&amp;#34; ] }, &amp;#34;EnableAuthWrite&amp;#34;: { &amp;#34;Fn::Equals&amp;#34;: [ { &amp;#34;Ref&amp;#34;: &amp;#34;authPermissions&amp;#34; }, &amp;#34;w&amp;#34; ] } }, &amp;#34;Resources&amp;#34;: { &amp;#34;InvokePhotoProcessorLambda&amp;#34;: { &amp;#34;Type&amp;#34; : &amp;#34;AWS::Lambda::Permission&amp;#34;, &amp;#34;Properties&amp;#34; : { &amp;#34;Action&amp;#34; : &amp;#34;lambda:InvokeFunction&amp;#34;, &amp;#34;FunctionName&amp;#34; : &amp;#34;workshopphotoprocessor&amp;#34;, &amp;#34;Principal&amp;#34; : &amp;#34;s3.</description>
    </item>
    
    <item>
      <title>Installs &amp; Configs</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/10_prerequisites/20_software.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/10_prerequisites/20_software.html</guid>
      <description>Before we begin coding, there are a few things we need to install, update, and configure in the Cloud9 environment.
Installing and updating In the Cloud9 terminal, run the following commands to install and update some software we&amp;rsquo;ll be using for this workshop:
# Update the AWS CLI pip install --user --upgrade awscli # Install and use Node.js v8.10 (to match AWS Lambda) nvm install v8.10.0 nvm alias default v8.</description>
    </item>
    
    <item>
      <title>Making Photos Searchable</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/110_ai/20_prep_for_searching.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/110_ai/20_prep_for_searching.html</guid>
      <description>Updating the GraphQL Schema Now that we are storing labels for each photo, we&amp;rsquo;re ready to move on and expose this data via our AppSync API.
While it&amp;rsquo;s possible to perform some level of searching via DynamoDB Query operations, a more flexible and performant approach is to use the Amazon Elasticsearch Service to index data and handle our search queries. Fortunately, the Amplify CLI makes creating an Amazon Elasticsearch Service endpoint, and connecting it to our app&amp;rsquo;s data, very easy.</description>
    </item>
    
    <item>
      <title>Rendering the Front End</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/30_adding_auth/20_adding_auth_front.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/30_adding_auth/20_adding_auth_front.html</guid>
      <description>Now that we have our backend set up for managing registrations and sign-in, all we need to do is use the withAuthenticator higher-order React component from AWS Amplify to wrap our existing App component. This will take care of rendering a simple UI for letting users sign up, confirm their account, sign in, sign out, or reset their password.
Adding Amplify NPM dependencies We haven&amp;rsquo;t yet added the aws-amplify and aws-amplify-react modules to our app, so let&amp;rsquo;s add them.</description>
    </item>
    
    <item>
      <title>Trying Out Some Queries</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/40_graphql/20_trying_out_queries.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/40_graphql/20_trying_out_queries.html</guid>
      <description>Open the AWS Console and click into the photoalbums API. Now we can start poking around with the API.
 Link to AWS AppSync web console in Northern Virgina
 Link to AWS AppSync web console in Ireland
  Click Queries in the sidebar on the left.
This area is AWS AppSync&amp;rsquo;s interactive query explorer. We can write queries and mutations here, execute them, and see the results. It&amp;rsquo;s a great way to test things out to make sure our resolvers are working the way we expect.</description>
    </item>
    
    <item>
      <title>Adding Cloud Storage</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/60_managing_photos/30_adding_storage.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/60_managing_photos/30_adding_storage.html</guid>
      <description>We&amp;rsquo;ll need a place to store all of the photos that get uploaded to our albums. Amazon Simple Storage Service (S3) is a great option for this and Amplify&amp;rsquo;s Storage module makes setting up and working with S3 very easy.
You can read more about Amplify&amp;rsquo;s Storage module here.
 Configuring and adding storage First, we&amp;rsquo;ll use the Amplify CLI to enable storage for our app. This will create a bucket on Amazon S3 and set it up with appropriate permissions so that users who are logged in to our app can read from and write to it.</description>
    </item>
    
    <item>
      <title>Managing Photos</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/60_managing_photos/40_upload_photos_consolidated.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/60_managing_photos/40_upload_photos_consolidated.html</guid>
      <description>Now that we have an S3 bucket where our photos can get stored, we&amp;rsquo;ll want to create a UI that lets us upload photos to that bucket for storage. We&amp;rsquo;ll also need to track that the photo was intended to be part of a specific album that it was uploaded to, so that we can eventually load all of the photos that belong to that album.
Let&amp;rsquo;s create a new S3ImageUpload component that will contain an HTML file input element which will fire off an event handler when a user selects a photo.</description>
    </item>
    
    <item>
      <title>Searching Photos By Label</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/110_ai/40_searching_for_labels.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/110_ai/40_searching_for_labels.html</guid>
      <description>With all of the back-end work completed, now we just need to update our web app to allow searching for photos by label.
Let&amp;rsquo;s create a new Search component and add it to the App component to be rendered on the root path. For rendering all of the matching photos in the Search component, we&amp;rsquo;ll re-use the PhotosList component we already created.
Replace photo-albums/src/App.js with the following: // photo-albums/src/App.js  import React, { Component } from &amp;#39;react&amp;#39;; import {BrowserRouter as Router, Route, NavLink} from &amp;#39;react-router-dom&amp;#39;; import { Divider, Form, Grid, Header, Input, List, Segment } from &amp;#39;semantic-ui-react&amp;#39;; import {v4 as uuid} from &amp;#39;uuid&amp;#39;; import { Connect, S3Image, withAuthenticator } from &amp;#39;aws-amplify-react&amp;#39;; import Amplify, { API, graphqlOperation, Storage } from &amp;#39;aws-amplify&amp;#39;; import aws_exports from &amp;#39;.</description>
    </item>
    
    <item>
      <title>Deploying our app to S3</title>
      <link>https://awskrug.github.io/amplify-photo-gallery-workshop/120_deploying/10_deploying.html</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://awskrug.github.io/amplify-photo-gallery-workshop/120_deploying/10_deploying.html</guid>
      <description>Before we build and publish our app, we should free up some memory on the Cloud9 instance. If you&amp;rsquo;re using a micro Cloud9 instance size, there&amp;rsquo;s a good chance there won&amp;rsquo;t be enough memory available to keep our development web server running and to create a production build.
 Go to the terminal tab that&amp;rsquo;s running the development webserver (where you ran npm start)
 Press Control-C to interrupt the development webserver and kill it.</description>
    </item>
    
  </channel>
</rss>